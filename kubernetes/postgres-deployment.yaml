apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    io.gym.service: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.gym.service: postgres
  template:
    metadata:
      labels:
        io.gym.service: postgres
        io.gym.network/app-network: "true"
    spec:
      containers:
        - name: postgres
          image: postgres:14.2
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      restartPolicy: Always
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim


# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   creationTimestamp: null
#   labels:
#     io.gym.service: gym-app
#   name: gym-app
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       io.gym.service: gym-app
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       creationTimestamp: null
#       labels:
#         io.gym.network/app-network: "true"
#         io.gym.service: gym-app
#     spec:
#       terminationGracePeriodSeconds: 30
#       containers:
#         - name: gin-app
#           image: registry.gitlab.com/gym-global/backend/gym:v1
#           ports:
#             - containerPort: 6000
#           resources: {}
#           imagePullPolicy: "Always"
#           envFrom:
#             - configMapRef:
#                 name: postgres-config

#       restartPolicy: Always
# status: {}
